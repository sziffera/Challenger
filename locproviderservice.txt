package com.example.challenger

import android.app.*
import android.content.Context
import android.content.Intent
import android.content.res.Configuration
import android.graphics.Color
import android.location.Location
import android.os.*
import android.util.Log
import androidx.core.app.NotificationCompat
import androidx.core.app.NotificationManagerCompat
import androidx.localbroadcastmanager.content.LocalBroadcastManager
import com.google.android.gms.location.*


class LocationProviderService : Service() {
    private val CHANNEL_ID: String = "ForegroundServiceChannel"
    private lateinit var mLocationCallback: LocationCallback
    private lateinit var mLocation: Location
    private lateinit var mFusedLocationClient: FusedLocationProviderClient
    private lateinit var mLocationRequest: LocationRequest
    private lateinit var location: Location
    private lateinit var mServiceHandler: Handler
    private lateinit var notificationManager: NotificationManagerCompat
    private lateinit var mBinder: LocalBinder

    val PACKAGE_NAME =
        "com.example.challenger"

    private val TAG: String =
        LocationProviderService::class.java.simpleName

    val ACTION_BROADCAST: String = PACKAGE_NAME + ".broadcast"
    val EXTRA_LOCATION = PACKAGE_NAME + ".location"
    private val EXTRA_STARTED_FROM_NOTIFICATION = PACKAGE_NAME + ".started_from_notification"
    private val UPDATE_INTERVAl: Long = 1000
    private val FASTEST_INTERVAL: Long = UPDATE_INTERVAl / 2
    private val notiID = 12345678
    private var mChangingConfiguration: Boolean = false





    override fun onCreate() {
        super.onCreate()
        mFusedLocationClient = LocationServices.getFusedLocationProviderClient(this)
        notificationManager = NotificationManagerCompat.from(this)

        mLocationCallback = object : LocationCallback() {
            override fun onLocationResult(locationResult: LocationResult) {
                super.onLocationResult(locationResult)
                onNewLocation(locationResult.lastLocation)
            }
        }
        createLocationRequest()
        getLastLocation()
        mBinder = LocalBinder()

        val handlerThread: HandlerThread = HandlerThread(TAG)
        handlerThread.start()
        mServiceHandler = Handler(handlerThread.looper)

        if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val name: CharSequence = getString(R.string.app_name)
            // Create the channel for the notification
            val mChannel = NotificationChannel(
                CHANNEL_ID,
                name,
                NotificationManager.IMPORTANCE_DEFAULT
            )
            notificationManager.createNotificationChannel(mChannel)
        }
    }





    override fun onStartCommand(intent: Intent, flags: Int, startId: Int): Int {

        Log.i(TAG,"service started")
        val startedFromNotification = intent
            .getBooleanExtra(EXTRA_STARTED_FROM_NOTIFICATION,false)
        if (startedFromNotification) {
            removeLocationUpdates()
            stopSelf()
        }

        return START_NOT_STICKY
    }

    override fun onBind(intent: Intent): IBinder? {
        stopForeground(true)
        mChangingConfiguration = false
        return mBinder
    }

    override fun onUnbind(intent: Intent?): Boolean {
        if (!mChangingConfiguration && requestingLocationUpdates(this)) {

                startForeground(notiID, getNotification());

        }
        return true
    }

    override fun onRebind(intent: Intent?) {

        stopForeground(true)
        mChangingConfiguration = false
        super.onRebind(intent)
    }

    override fun onConfigurationChanged(newConfig: Configuration) {
        super.onConfigurationChanged(newConfig)
        mChangingConfiguration = true
    }

    private fun getNotification(): Notification? {
        val intent = Intent(
            this,
            LocationProviderService::class.java
        )
        val text = getLocationText(mLocation)

        // Extra to help us figure out if we arrived in onStartCommand via the notification or not.
        intent.putExtra(
            EXTRA_STARTED_FROM_NOTIFICATION,
            true
        )

        // The PendingIntent that leads to a call to onStartCommand() in this service.
        val servicePendingIntent = PendingIntent.getService(
            this, 0, intent,
            PendingIntent.FLAG_UPDATE_CURRENT
        )

        // The PendingIntent to launch activity.
        val activityPendingIntent = PendingIntent.getActivity(
            this, 0,
            Intent(this, MainActivity::class.java), 0
        )

        val builder =
            NotificationCompat.Builder(
                    this,
                    CHANNEL_ID
                )
                .setContentTitle("Challenge recorder")
                .setColor(Color.RED)
                .setSmallIcon(R.mipmap.ic_launcher)
                .setOnlyAlertOnce(true)
                .setTicker(text)
                .setWhen(System.currentTimeMillis())
                .setPriority(NotificationCompat.PRIORITY_DEFAULT)
        notificationManager.notify(notiID, builder.build())

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            builder.setChannelId(CHANNEL_ID) // Channel ID
        }
        return builder.build()
    }

    override fun onDestroy() {
        mServiceHandler.removeCallbacksAndMessages(null)
    }

    private fun removeLocationUpdates() {
        Log.i(
            TAG,
            "Removing location updates"
        )
        try {
            mFusedLocationClient.removeLocationUpdates(mLocationCallback)
            setRequestingLocationUpdates(this, false)
            stopSelf()
        } catch (unlikely: SecurityException) {
            setRequestingLocationUpdates(this, true)
            Log.e(
                TAG,
                "Lost location permission. Could not remove updates. $unlikely"
            )
        }
    }

    private fun getLastLocation() {
        try {
            mFusedLocationClient.lastLocation.addOnCompleteListener {
                if (it.isSuccessful && it.result != null) {
                    mLocation = it.result!!
                } else {
                    Log.w(TAG, "failed to get loc")
                }
            }
        } catch (exception: SecurityException) {
            Log.e(TAG, "Lost loc permission")
        }
    }

    private fun onNewLocation(location: Location) {
        Log.i(TAG, "new loc: $location")
        mLocation = location
        val intent = Intent(ACTION_BROADCAST)
        intent.putExtra(EXTRA_LOCATION,location)
        LocalBroadcastManager.getInstance(applicationContext).sendBroadcast(intent)

        if(serviceIsRunningInForeground(this)) {
            notificationManager.notify(notiID,getNotification()!!)
        }

    }

    fun requestLocationUpdates() {
        setRequestingLocationUpdates(this,true)
        startService(Intent(this,LocationProviderService::class.java))
        try {
            mFusedLocationClient.requestLocationUpdates(mLocationRequest,mLocationCallback, Looper.myLooper())
        } catch (unlikely: SecurityException) {
            setRequestingLocationUpdates(this, false)
        }
    }

    private fun createLocationRequest() {
        mLocationRequest = LocationRequest().apply {
            setInterval(UPDATE_INTERVAl)
            setFastestInterval(FASTEST_INTERVAL)
            setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY)
        }


    }

    private fun serviceIsRunningInForeground(context: Context): Boolean {

        val manager = context.getSystemService(
            Context.ACTIVITY_SERVICE
        ) as ActivityManager
        for (service in manager.getRunningServices(Int.MAX_VALUE)) {
            if (javaClass.name == service.service.className) {
                if (service.foreground) {
                    return true
                }
            }
        }
        return false
    }

    class LocalBinder : Binder() {
        fun getService() : LocationProviderService {
            return LocationProviderService()
        }
    }


}
